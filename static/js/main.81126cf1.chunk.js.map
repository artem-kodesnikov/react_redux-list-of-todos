{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","value","filterReducer","filters","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","useMemo","tempTodos","ACTIVE","completed","COMPLETED","ALL","title","toLowerCase","includes","length","className","map","id","classNames","onClick","currentTodoAction","openSelectedTodo","TodoFilter","handleQuery","filterActions","onSubmit","event","preventDefault","onChange","handleStatus","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","fetchUser","a","userFromServer","useEffect","userId","href","email","name","App","fetchData","todosAction","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81126cf1.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = { type: 'filters/STATUS', payload: Status };\ntype QueryAction = { type: 'filters/QUERY', payload: string };\n\ntype Action = StatusAction | QueryAction;\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filters/STATUS',\n  payload: value,\n});\n\nconst query = (value: string): QueryAction => ({\n  type: 'filters/QUERY',\n  payload: value,\n});\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  filters = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filters/STATUS':\n      return { ...filters, status: action.payload };\n\n    case 'filters/QUERY':\n      return { ...filters, query: action.payload };\n\n    default:\n      return filters;\n  }\n};\n\nexport const actions = { status, query };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodoAction = { type: 'todos/ADD', payload: Todo[] };\n\ntype Action = TodoAction;\n\nconst add = (todos: Todo[]): TodoAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { add };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const visibleTodos = useMemo(() => {\n    let tempTodos = todos.filter((todo) => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !todo.completed;\n\n        case Status.COMPLETED:\n          return todo.completed;\n\n        case Status.ALL:\n        default:\n          return todo;\n      }\n    });\n\n    if (query) {\n      tempTodos = tempTodos.filter((todo) => {\n        return todo.title.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n\n    return tempTodos;\n  }, [todos, status, query]);\n\n  const openSelectedTodo = (todo: Todo) => {\n    dispatch(currentTodoAction.setTodo(todo));\n  };\n\n  return (\n    <>\n      {visibleTodos.length\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map((todo: Todo) => (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed\n                    && (\n                      <span className=\"icon\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames({\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => openSelectedTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye\" />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )\n        : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleStatus = (value: string) => {\n    switch (value) {\n      case Status.ACTIVE:\n        return dispatch(filterActions.status(Status.ACTIVE));\n\n      case Status.COMPLETED:\n        return dispatch(filterActions.status(Status.COMPLETED));\n\n      case Status.ALL:\n      default:\n        return dispatch(filterActions.status(Status.ALL));\n    }\n  };\n\n  const handleQuery = (value: string) => {\n    return dispatch(filterActions.query(value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => handleStatus(event.target.value)}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"input clear button\"\n                onClick={() => handleQuery('')}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const fetchUser = async (id: number) => {\n    try {\n      setIsLoading(true);\n      const userFromServer = await getUser(id);\n\n      setUser(userFromServer);\n    } catch {\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!currentTodo) {\n      return;\n    }\n\n    fetchUser(currentTodo.userId);\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoAction.removeTodo())}\n              aria-label=\"close modal button\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {currentTodo?.title}\n            </p>\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n              <a href={user?.email}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { actions as todosAction } from './features/todos';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      const todos = await getTodos();\n\n      dispatch(todosAction.add(todos));\n    } catch {\n      dispatch(todosAction.add([]));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}